name: 构建测试

on:
  workflow_dispatch:  # 手动触发

jobs:
  setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载 Go 源码仓库
      uses: actions/checkout@v3
      with:
        repository: arror/golang
        path: go-source

    - name: 从源码构建 Go
      working-directory: go-source
      run: |
        cd src
        GOOS=linux GOARCH=amd64 ./make.bash
      
    - name: 配置 Go 环境变量
      run: |
        echo "GOROOT=${{ github.workspace }}/go-source" >> $GITHUB_ENV
        echo "${{ github.workspace }}/go-source/bin" >> $GITHUB_PATH
    - name: 验证 Go 安装
      run: |
        which go
        go env GOROOT
        go env GOOS GOARCH

    - name: 下载 OpenHarmony CommandLine
      uses: actions/download-artifact@v4
      with:
        name: commandline-tools
        path: downloads
        github-token: ${{ secrets.GH_PAT }}
        run-id: 13149180954

    - name: 解压 OpenHarmony CommandLine
      run: |
        cd downloads
        echo -e "\n=== OpenHarmony CommandLine ==="
        unzip commandline-tools.zip

    - name: 构建二进制
      run: |
        echo "AR=${{ github.workspace }}/command-line-tools/sdk/default/openharmony/native/llvm/bin/llvm-ar" >> $GITHUB_ENV
        echo "CC=${{ github.workspace }}/command-line-tools/sdk/default/openharmony/native/llvm/bin/aarch64-unknown-linux-ohos-clang" >> $GITHUB_ENV
        echo "CXX=${{ github.workspace }}/command-line-tools/sdk/default/openharmony/native/llvm/bin/unknown-linux-ohos-clang++" >> $GITHUB_ENV
        echo "GOOS=openharmony >> $GITHUB_ENV
        echo "GOARCH=arm64 >> $GITHUB_ENV
        echo "CGO_ENABLED=1 >> $GITHUB_ENV
        go build -buildmode c-shared -gcflags="all=-N -l" -o ./output/libohtest.so main.go

    - name: 压缩构建产物
      run: |
        zip -r assets.zip output
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: assets
        path: assets.zip
