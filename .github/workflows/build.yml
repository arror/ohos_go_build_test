name: 构建测试

on:
  workflow_dispatch:  # 手动触发

jobs:
  setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载当前源码
      uses: actions/checkout@v3
      
    - name: 下载 Golang
      uses: actions/download-artifact@v4
      with:
        name: go-build
        path: temp/golang
        github-token: ${{ secrets.GH_PAT }}
        run-id: 13149385502
        
    - name: 下载 OpenHarmony CommandLine
      uses: actions/download-artifact@v4
      with:
        name: commandline-tools
        path: temp/tools
        github-token: ${{ secrets.GH_PAT }}
        run-id: 13149180954

    - name: 解压
      run: |
        cd temp/golang
        unzip go-build.zip
        cd ../tools
        unzip commandline-tools.zip
        
    - name: 构建二进制
      run: |

        pwd

        ls -l

        cd temp
        ls -l
        cd golang
        ls -l
        cd ../../
        
        echo "GOROOT=${{ github.workspace }}/temp/golang" >> $GITHUB_ENV
        echo "${{ github.workspace }}/temp/golang/bin" >> $GITHUB_PATH

        go env

        echo "arch=arm64" >> $GITHUB_ENV
        echo "target=aarch64" >> $GITHUB_ENV
        echo "outdir=arm64-v8a" >> $GITHUB_ENV

        echo "OHOS_NATIVE_HOME=${{ github.workspace }}/temp/tools/commandline-tools/sdk/default/openharmony/native" >> $GITHUB_ENV
        echo "BASE_FLAGS=-Wno-error --sysroot=$OHOS_NATIVE_HOME/sysroot" >> $GITHUB_ENV
        echo "TOOLCHAIN=$OHOS_NATIVE_HOME/llvm" >> $GITHUB_ENV
        
        echo "CC=$TOOLCHAIN/bin/clang" >> $GITHUB_ENV
        echo "CXX=$TOOLCHAIN/bin/clang++" >> $GITHUB_ENV
        echo "LD=$TOOLCHAIN/bin/clang" >> $GITHUB_ENV
        echo "CGO_AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
        echo "GOASM=$TOOLCHAIN/bin/llvm-as" >> $GITHUB_ENV
        echo "GOOS=openharmony" >> $GITHUB_ENV
        echo "GOARCH=$arch" >> $GITHUB_ENV
        echo "GOARM=" >> $GITHUB_ENV
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "CGO_CXXFLAGS=" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-Wno-error --target=$target-linux-ohos $BASE_FLAGS" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-extld=$LD --sysroot=$OHOS_NATIVE_HOME/sysroot --target=$target-linux-ohos" >> $GITHUB_ENV
        echo "sourceFile=./" >> $GITHUB_ENV
        echo "outputFile=./output/libohtest.so" >> $GITHUB_ENV

        go build -buildmode c-shared -tags "ohos" -gcflags="all=-N -l" -o $outputFile $sourceFile

    - name: 压缩构建产物
      run: |
        zip -r assets.zip output
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: assets
        path: assets.zip
